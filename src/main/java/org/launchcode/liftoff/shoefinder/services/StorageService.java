package org.launchcode.liftoff.shoefinder.services;

import org.launchcode.liftoff.shoefinder.controllers.ImageController;
import org.launchcode.liftoff.shoefinder.data.ImageInfoRepository;
import org.launchcode.liftoff.shoefinder.data.ImageLocalRepository;
import org.launchcode.liftoff.shoefinder.data.ShoeListingRepository;
import org.launchcode.liftoff.shoefinder.data.UserRepository;
import org.launchcode.liftoff.shoefinder.models.ImageInfo;
import org.launchcode.liftoff.shoefinder.models.ImageLocal;
import org.launchcode.liftoff.shoefinder.models.ShoeListing;
import org.launchcode.liftoff.shoefinder.models.UserEntity;
import org.launchcode.liftoff.shoefinder.security.SecurityUtility;
import org.springframework.core.io.Resource;
import org.springframework.core.io.UrlResource;
import org.springframework.stereotype.Service;
import org.springframework.util.FileSystemUtils;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.servlet.mvc.method.annotation.MvcUriComponentsBuilder;

import java.io.IOException;
import java.net.MalformedURLException;
import java.nio.file.FileAlreadyExistsException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.stream.Stream;

import static org.launchcode.liftoff.shoefinder.constants.ListingConstants.LISTING_IMAGE_DIR_PATH;


@Service
public class StorageService {

    private final Path root = Paths.get("./files");

    private final UserRepository userRepository;
    private final ImageInfoRepository imageInfoRepository;
    private final ShoeListingRepository shoeListingRepository;
    private final ImageLocalRepository imageLocalRepository;

    public StorageService(UserRepository userRepository, ImageInfoRepository imageInfoRepository, ShoeListingRepository shoeListingRepository, ImageLocalRepository imageLocalRepository) {
        this.userRepository = userRepository;
        this.imageInfoRepository = imageInfoRepository;
        this.shoeListingRepository = shoeListingRepository;
        this.imageLocalRepository = imageLocalRepository;
    }

    public void init() {
        try {
            Files.createDirectories(root);
        } catch (IOException e) {
            throw new RuntimeException("Could not initialize folder for files!");
        }
    }

    //For saving User Images
    public void saveUserImage(MultipartFile file) {

        String username = SecurityUtility.getSessionUser();
        UserEntity userEntity = userRepository.findByUsernameIgnoreCase(username);


        // Checks file size
        final long MAX_FILE_SIZE = 3 * 1024 * 1024; // 3MB
        if (file.getSize() > MAX_FILE_SIZE) {
//            throw new Exception("File size is too large.");
//                return "File size is too large.";
        }

        ImageInfo imageInfo = new ImageInfo();

        // Checks file extension type
        String fileName = file.getOriginalFilename();

        String fileExtension = fileName.substring(fileName.lastIndexOf('.') + 1);

        userEntity.setImageInfo(imageInfo);

        imageInfoRepository.save(imageInfo);



        //Create unique image name using autogenerated id
        String newFileName = "user_image_" + imageInfo.getId() + "." + fileExtension;


        try {
            Files.copy(file.getInputStream(), this.root.resolve(newFileName));

            imageInfo.setName(newFileName);

            String url = MvcUriComponentsBuilder
                    .fromMethodName(ImageController.class, "getImage", newFileName).build().toString();

            imageInfo.setUrl(url);

            userRepository.save(userEntity);


        } catch (Exception e) {
            if (e instanceof FileAlreadyExistsException) {
                throw new RuntimeException("A file of that name already exists.");
            }

            throw new RuntimeException(e.getMessage());
        }
    }


    // For saving Lising Images
    public void saveListingImage(MultipartFile file, ShoeListing shoeListing) {

        // Checks file size
        final long MAX_FILE_SIZE = 3 * 1024 * 1024; // 3MB
        if (file.getSize() > MAX_FILE_SIZE) {
//            throw new Exception("File size is too large.");
//                return "File size is too large.";
        }

        ImageLocal imageInfo = new ImageLocal();

        // Checks file extension type
        String fileName = file.getOriginalFilename();

        String fileExtension = fileName.substring(fileName.lastIndexOf('.') + 1);

        shoeListing.setImageLocal(imageInfo);

        imageLocalRepository.save(imageInfo);

        //Create unique image name using autogenerated id
        String newFileName = "listing_image_" + imageInfo.getId() + "." + fileExtension;


        try {
            Files.copy(file.getInputStream(), this.root.resolve(newFileName));

            imageInfo.setName(newFileName);

            String url = MvcUriComponentsBuilder
                    .fromMethodName(ImageController.class, "getImage", newFileName).build().toString();

            imageInfo.setUrl(url);

            shoeListingRepository.save(shoeListing);


        } catch (Exception e) {
            if (e instanceof FileAlreadyExistsException) {
                throw new RuntimeException("A file of that name already exists.");
            }

            throw new RuntimeException(e.getMessage());
        }
    }




    public Resource load(String filename) {
        try {
            Path file = root.resolve(filename);
            Resource resource = new UrlResource(file.toUri());

            if (resource.exists() || resource.isReadable()) {
                return resource;
            } else {
                throw new RuntimeException("Could not read the file!");
            }
        } catch (MalformedURLException e) {
            throw new RuntimeException("Error: " + e.getMessage());
        }
    }

    public boolean delete(String filename) {
        try {
            Path file = root.resolve(filename);
            return Files.deleteIfExists(file);
        } catch (IOException e) {
            throw new RuntimeException("Error: " + e.getMessage());
        }
    }

    public void deleteAll() {
        FileSystemUtils.deleteRecursively(root.toFile());
    }


    public Stream<Path> loadAll() {
        try {
            return Files.walk(this.root, 1).filter(path -> !path.equals(this.root)).map(this.root::relativize);
        } catch (IOException e) {
            throw new RuntimeException("Could not load the files!");
        }
    }

    public Path findFile(Path root, String fileName) {
        try {
            return Files.walk(root, 1).filter(path -> path.getFileName().toString().equals(fileName)).findFirst().orElse(null);
        } catch (IOException e) {
            throw new RuntimeException("Could not find the file!");
        }
    }

}
